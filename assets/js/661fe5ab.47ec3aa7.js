"use strict";(self.webpackChunkstatetrace_docs=self.webpackChunkstatetrace_docs||[]).push([[332],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(t),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(f,s(s({ref:n},p),{},{components:t})):r.createElement(f,s({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},619:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),s=["components"],i={sidebar_position:6},c="Running Statetrace",l={unversionedId:"reference/running",id:"reference/running",isDocsHomePage:!1,title:"Running Statetrace",description:"Docker",source:"@site/docs/reference/running.md",sourceDirName:"reference",slug:"/reference/running",permalink:"/docs/reference/running",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Environment Variables",permalink:"/docs/reference/environment-variables"},next:{title:"Connect to AWS RDS/Aurora Postgres",permalink:"/docs/inbound-configuration/aws-rds-postgres"}},p=[{value:"Docker",id:"docker",children:[],level:3},{value:"Environment variables",id:"environment-variables",children:[],level:3},{value:"Docker-Compose",id:"docker-compose",children:[],level:3}],u={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"running-statetrace"},"Running Statetrace"),(0,a.kt)("h3",{id:"docker"},"Docker"),(0,a.kt)("p",null,"Statetrace runs inside a container. Either run this container with podman, docker, or on your favorite cloud provider."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n    --net=\"host\"\\\n    -e STATETRACE_DATABASE_URL='postgres://postgres:postgres@localhost:5432/postgres' \\\n    -e SECRET_KEY_BASE='<...>' \\\n    -e STATETRACE_LICENSE='<...>' \\\n    -e STATETRACE_GQL_API_KEY='<...>' \\\n    -e STATETRACE_INBOUND_CONFIG=$(cat ./statetrace-config.yaml) \\\n    -p 4000:4000 \\\n    statetraceofficial/statetrace-beta\n")),(0,a.kt)("h3",{id:"environment-variables"},"Environment variables"),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"./environment-variables"},"complete list of environment variables")," to control statetrace. "),(0,a.kt)("h3",{id:"docker-compose"},"Docker-Compose"),(0,a.kt)("p",null,"Run Statetrace in docker-compose:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"name=docker-compose.yaml",name:"docker-compose.yaml"},'version: \'3\'\n    \nservices:\n  # This is the database to which your application would connect to store application data\n  application_db:\n    image: postgres\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n\n    # We need to start postgres with special WAL settings \n    command:\n      - "postgres"\n      - "-c"\n      - "wal_level=logical"\n      - "-c"\n      - "max_wal_senders=2"\n      - "-c"\n      - "max_replication_slots=2"\n    ports:\n      - "5432:5432"\n  \n  # This is the statetrace daemon that will monitor changes\n  statetrace:\n    image: statetraceofficial/statetrace-beta\n    environment:\n      - STATETRACE_DATABASE_URL=postgres://postgres:postgres@statetrace_db:5432/postgres\n      - SECRET_KEY_BASE=<...>\n      - STATETRACE_LICENSE=<...>\n      - STATETRACE_GQL_API_KEY=<...>\n      - STATETRACE_INBOUND_CONFIG: |\n            inbounds:\n              - name: Postgres DB\n                database_type: postgres\n                host: application_db\n                username: postgres\n                password: postgres\n                port: 5432\n                database: postgres\n                publication: statetrace\n                slot: statetrace\n                tables:\n                    - schema: public\n                      name: secret_table\n                      include: false\n                    - schema: public\n                      name: users\n                      columns:\n                        social_security_number:\n                            hash_value_before_logging: true\n                outbounds:\n                    - name: Postgres Search\n                      handler: search\n      - STATETRACE_PORT=4000\n    depends_on:\n      - statetrace_db\n      - application_db\n    ports:\n      - "4000:4000"\n\n  # This is the database that stores the buffer and meta-information\n  statetrace_db:\n    image: postgres\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n')))}m.isMDXComponent=!0}}]);