"use strict";(self.webpackChunkstatetrace_docs=self.webpackChunkstatetrace_docs||[]).push([[574],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(y,i(i({ref:n},p),{},{components:t})):a.createElement(y,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7513:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],s={sidebar_position:3},c="Framework Integrations",l={unversionedId:"reference/application-integrations",id:"reference/application-integrations",isDocsHomePage:!1,title:"Framework Integrations",description:"Ready made libraries",source:"@site/docs/reference/application-integrations.md",sourceDirName:"reference",slug:"/reference/application-integrations",permalink:"/statetrace-docs/docs/reference/application-integrations",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Annotation Table",permalink:"/statetrace-docs/docs/reference/annotation-reference"},next:{title:"GraphQL",permalink:"/statetrace-docs/docs/reference/gql"}},p=[{value:"Ready made libraries",id:"ready-made-libraries",children:[{value:"Python/Django",id:"pythondjango",children:[],level:3},{value:"Elixir/Phoenix",id:"elixirphoenix",children:[],level:3}],level:2},{value:"Templates",id:"templates",children:[{value:"Python / SQLAlchemy",id:"python--sqlalchemy",children:[],level:3},{value:"TypeScript / TypeORM",id:"typescript--typeorm",children:[],level:3}],level:2}],u={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"framework-integrations"},"Framework Integrations"),(0,o.kt)("h2",{id:"ready-made-libraries"},"Ready made libraries"),(0,o.kt)("p",null,"There are some ready to go libraries for some languages that configure the ORM and includes a middleware."),(0,o.kt)("h3",{id:"pythondjango"},"Python/Django"),(0,o.kt)("p",null,"An official Django integration available that will wrap all requests in transactions and automatically annotate them: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SoCal-Software-Labs/statetrace_django"},"https://github.com/SoCal-Software-Labs/statetrace_django")),(0,o.kt)("h3",{id:"elixirphoenix"},"Elixir/Phoenix"),(0,o.kt)("p",null,"There is an official project for automatically annotating Pheonix project using Ecto. ",(0,o.kt)("a",{parentName:"p",href:"https://hexdocs.pm/statetrace_elixir/readme.html"},"https://hexdocs.pm/statetrace_elixir/readme.html")),(0,o.kt)("h2",{id:"templates"},"Templates"),(0,o.kt)("p",null,"For a few other languages, you can use these templates below to get started annotating transactions:"),(0,o.kt)("h3",{id:"python--sqlalchemy"},"Python / SQLAlchemy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class StatetraceAnnotation(Base):\n    __tablename__ = \'statetrace_annotations\'\n    id = Column(Text(), primary_key=True)\n    kind = Column(Text())\n    meta = Column(JSON())\n    payload = Column(JSON())\n\n\nsess_id = str(uuid.uuid4())\nsession = Session()\nwith session.begin():\n  session_annotation = StatetraceAnnotation(id=sess_id, kind="_st.app.sess", meta={}, payload={"session_actor_id": 1})\n  session.add(session_annotation)\n\n\n# For each action you want to annotate, connect with session\nsession = Session()\nwith session.begin():\n  # Do your stuff\n  # ...\n\n  session_annotation = StatetraceAnnotation(id=str(uuid.uuid4()), kind="_st.app.act", meta={}, payload={"action_session_id": sess_id})\n  session.add(session_annotation)\n')),(0,o.kt)("h3",{id:"typescript--typeorm"},"TypeScript / TypeORM"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Entity, PrimaryColumn, Column } from "typeorm";\nimport { v4 as uuidv4 } from \'uuid\';\n\n\n@Entity("statetrace_annotations")\nexport class StatetraceAnnotation {\n\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    kind: string;\n\n    @Column()\n    meta: json;\n\n    @Column()\n    payload: json;\n}\n\nconst sessionID = uuidv4();\n\nconst sessAnnotation = new StatetraceAnnotation();\nsessAnnotation.id = sessionID;\nsessAnnotation.kind = "_st.app.sess";\nsessAnnotation.payload = {"session_actor_id": 1}; \nsessAnnotation.save()\n\nawait getConnection().transaction(async transactionalEntityManager => {\n  // Do your work\n  // ...\n\n  const annotation = new StatetraceAnnotation();\n  annotation.id = uuidv4();\n  annotation.kind = "_st.app.act";\n  annotation.payload = {"action_session_id": sessionID}; \n  transactionalEntityManager.save(annotation)\n});\n\n')))}d.isMDXComponent=!0}}]);