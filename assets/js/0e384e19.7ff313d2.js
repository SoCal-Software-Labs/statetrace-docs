"use strict";(self.webpackChunkstatetrace_docs=self.webpackChunkstatetrace_docs||[]).push([[671],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(g,i(i({ref:t},p),{},{components:a})):n.createElement(g,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9881:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),i=["components"],s={sidebar_position:1},l="Statetrace in 10 minutes",c={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Statetrace in 10 minutes",description:"Statetrace Core is the free version of Statetrace. There are four major steps to configure it:",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Statetrace Config",permalink:"/docs/reference/config"}},p=[{value:"Get the Statetrace License",id:"get-the-statetrace-license",children:[],level:2},{value:"Configuring Statetrace",id:"configuring-statetrace",children:[{value:"Generating Random Keys",id:"generating-random-keys",children:[],level:3}],level:2},{value:"Configuring your application database",id:"configuring-your-application-database",children:[{value:"Postgres",id:"postgres",children:[],level:3},{value:"Mysql",id:"mysql",children:[],level:3}],level:2},{value:"Setting up the Statetrace Buffer Database",id:"setting-up-the-statetrace-buffer-database",children:[],level:2},{value:"Complete configuration example",id:"complete-configuration-example",children:[],level:2},{value:"Annotating information",id:"annotating-information",children:[{value:"Steps to annotating",id:"steps-to-annotating",children:[],level:3}],level:2},{value:"Using the GQL API",id:"using-the-gql-api",children:[],level:2}],u={toc:p};function d(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"statetrace-in-10-minutes"},"Statetrace in 10 minutes"),(0,o.kt)("p",null,"Statetrace Core is the free version of Statetrace. There are four major steps to configure it:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Configuring your application Postgres database"),(0,o.kt)("li",{parentName:"ul"},"Setup the buffer database"),(0,o.kt)("li",{parentName:"ul"},"Setup Statetrace"),(0,o.kt)("li",{parentName:"ul"},"Change application to annotate transactions")),(0,o.kt)("p",null,"There is no better way to learn than to see a ",(0,o.kt)("a",{parentName:"p",href:"#complete-configuration-example"},"complete example"),". For a more detailed walkthough, follow along below."),(0,o.kt)("h2",{id:"get-the-statetrace-license"},"Get the Statetrace License"),(0,o.kt)("p",null,"Go to ",(0,o.kt)("a",{parentName:"p",href:"https://www.statetrace.com/statetrace-core"},"https://www.statetrace.com/statetrace-core")," to get your free ",(0,o.kt)("inlineCode",{parentName:"p"},"STATETRACE_LICENSE")," key. No email or sign-up required."),(0,o.kt)("h2",{id:"configuring-statetrace"},"Configuring Statetrace"),(0,o.kt)("p",null,"Statetrace runs inside a container. The current official image is ",(0,o.kt)("inlineCode",{parentName:"p"},"statetraceofficial/statetrace-beta")," Either run the container with podman or docker."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n    --net=\"host\"\\\n    -e STATETRACE_DATABASE_URL='postgres://postgres:postgres@localhost:5432/postgres' \\\n    -e STATETRACE_SECRET_KEY_BASE='<...>' \\\n    -e STATETRACE_LICENSE='<...>' \\\n    -e STATETRACE_GQL_API_KEY='<...>' \\\n    -e STATETRACE_INBOUND_CONFIG=\"$(cat ./statetrace-config.yaml)\" \\\n    -p 4000:4000 \\\n    -it \\\n    statetraceofficial/statetrace-beta\n")),(0,o.kt)("p",null,"The following environment variables are required to configure the statetrace daemon."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"STATETRACE_DATABASE_URL")," the database url of where to store the statetrace metadata and buffer information"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"STATETRACE_SECRET_KEY_BASE")," a randomly generated 32 character string (used for cryptographically hashing columns)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"STATETRACE_LICENSE")," the license key downloaded from ",(0,o.kt)("a",{parentName:"li",href:"https://www.statetrace.com/statetrace-core"},"https://www.statetrace.com/"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"STATETRACE_INBOUND_CONFIG")," the configuration of what databases to connect to. See ",(0,o.kt)("a",{parentName:"li",href:"/docs/reference/config"},"config")," for more info."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"STATETRACE_GQL_API_KEY")," a randomly generated 32 character string to use as authentication for the ",(0,o.kt)("a",{parentName:"li",href:"/docs/reference/gql"},"GQL API"))),(0,o.kt)("h3",{id:"generating-random-keys"},"Generating Random Keys"),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"STATETRACE_SECRET_KEY_BASE")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"STATETRACE_GQL_API_KEY")," you can use whatever method you want to generate the string or use the following linux command below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"head -c 500 /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1\n")),(0,o.kt)("h2",{id:"configuring-your-application-database"},"Configuring your application database"),(0,o.kt)("p",null,"Statetrace works by acting as a replica connected to your database. Having a direct source of changes enables statetrace to accurately record your data's story. Each database requires a bit of extra configuration."),(0,o.kt)("h3",{id:"postgres"},"Postgres"),(0,o.kt)("p",null,"Your postgres application database will need to be configured so that the WAL level is set to logical. You will need to set the following variables:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"wal_level=logical")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"max_wal_senders=2")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"max_replication_slots=2"))),(0,o.kt)("p",null,"In a production environment set ",(0,o.kt)("inlineCode",{parentName:"p"},"max_wal_senders")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"max_replication_slots")," higher if you have other replicas attached to postgres. See specific instructions for ",(0,o.kt)("a",{parentName:"p",href:"/docs/inbound-configuration/aws-rds-postgres"},"RDS")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/inbound-configuration/gcp-postgres"},"Google Cloud SQL"),"."),(0,o.kt)("h3",{id:"mysql"},"Mysql"),(0,o.kt)("p",null,"MySQL requires GTID and metadata to be enabled. To enable the features required for Statetrace, run MySQL with the following options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--gtid_mode=ON")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--enforce_gtid_consistency=ON")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--log_bin=ON")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--binlog_format=ROW")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--binlog_row_image=FULL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--server-id=1")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--binlog-row-metadata=FULL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--binlog_rows_query_log_events=ON"))),(0,o.kt)("p",null,"In a production environment set ",(0,o.kt)("inlineCode",{parentName:"p"},"max_wal_senders")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"max_replication_slots")," higher if you have other replicas attached to postgres. See specific instructions for ",(0,o.kt)("a",{parentName:"p",href:"/docs/inbound-configuration/aws-rds-mysql"},"RDS")," and Google Cloud SQL."),(0,o.kt)("h2",{id:"setting-up-the-statetrace-buffer-database"},"Setting up the Statetrace Buffer Database"),(0,o.kt)("p",null,"Statetrace stores events and session information in a seperate Postgres datatabase as a durable buffer. This database can be pruned as events are dispatched to the outbound handlers."),(0,o.kt)("p",null,"Nothing special regarding the WAL needs to be configured for the buffer database, however it should be a seperate database from your application DB."),(0,o.kt)("h2",{id:"complete-configuration-example"},"Complete configuration example"),(0,o.kt)("p",null,"Putting this all together depends on your platform. As an example, the following is a docker-compose file that shows how to configure statetrace for use with Postgres."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"name=docker-compose.yaml",name:"docker-compose.yaml"},'version: \'3\'\n    \nservices:\n  # This is the database to which your application would connect to store application data\n  application_db:\n    image: postgres\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n\n    # We need to start postgres with special WAL settings \n    command:\n      - "postgres"\n      - "-c"\n      - "wal_level=logical"\n      - "-c"\n      - "max_wal_senders=2"\n      - "-c"\n      - "max_replication_slots=2"\n    ports:\n      - "5432:5432"\n  \n  # This is the statetrace daemon that will monitor changes\n  statetrace:\n    image: statetraceofficial/statetrace-beta\n    environment:\n      - STATETRACE_DATABASE_URL=postgres://postgres:postgres@statetrace_db:5432/postgres\n      - STATETRACE_SECRET_KEY_BASE=<...>\n      - STATETRACE_LICENSE=<...>\n      - STATETRACE_GQL_API_KEY=<...>\n      - STATETRACE_INBOUND_CONFIG: |\n            inbounds:\n              - name: Postgres DB\n                database_type: postgres\n                host: application_db\n                username: postgres\n                password: postgres\n                port: 5432\n                database: postgres\n                publication: statetrace\n                slot: statetrace\n                tables:\n                    - schema: public\n                      name: secret_table\n                      include: false\n                    - schema: public\n                      name: users\n                      columns:\n                        social_security_number:\n                            hash_value_before_logging: true\n                outbounds:\n                    - name: Postgres Search\n                      handler: search\n      - STATETRACE_PORT=4000\n    depends_on:\n      - statetrace_db\n      - application_db\n    ports:\n      - "4000:4000"\n\n  # This is the database that stores the buffer and meta-information\n  statetrace_db:\n    image: postgres\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n')),(0,o.kt)("h2",{id:"annotating-information"},"Annotating information"),(0,o.kt)("p",null,"There are already some ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/application-integrations"},"ready-made integrations")," to use annotations with your favorite framework, however statetrace works effortlessly on anything. "),(0,o.kt)("p",null,'Statetrace integrates on the transaction level. To annotate your changes in your application, simply insert an entry into a special "statetrace_annotations" table in your application\'s database.'),(0,o.kt)("h3",{id:"steps-to-annotating"},"Steps to annotating"),(0,o.kt)("p",null,"To setup annotations, you will need to create a table in your application database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE statetrace_annotations(\n   id TEXT PRIMARY KEY,\n   kind TEXT,\n   meta JSON,\n   payload JSON,\n);\n")),(0,o.kt)("p",null,"This table can be safely truncated at any time because Statetrace reads its values from the logical replication log."),(0,o.kt)("p",null,"Now insert the session annotation as JSON data. This requires a unique id that you will later use to link transactions to this session."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"BEGIN;\nINSERT INTO \n    statetrace_annotations \n        (id, kind, meta, payload) \n    VALUES (\n        (\n            'bc573b1d-5ed0-4018-bcf4-74ce1b23875d',\n            '_st.app.sess',\n            '{}'::JSON,\n            '{\"session_actor_email\": \"anon@anon.com\", \"session_actor_id\": \"123\"}'::JSON,\n        )\n    );\nCOMMIT;\n")),(0,o.kt)("p",null,"You only need to insert a session once. Now your application business logic can be wrapped in a transaction that associates it with the session ID from above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"BEGIN;\n\n--Do all of your work\nINSERT ... VALUES ...;\nUPDATE ... WHERE ...;\nDELETE ... WHERE ...;\n\n-- Annotate transaction with link to session\nINSERT INTO \n    statetrace_annotations \n        (id, kind, meta, payload) \n    VALUES (\n        (\n            '9c4c25de-1bed-4037-b981-e3127fadfc32',\n            '_st.app.act',\n            '{}'::JSON,\n            '{\"action_session_id\": \"bc573b1d-5ed0-4018-bcf4-74ce1b23875d\"}'::JSON,\n        )\n    );\nCOMMIT;\n")),(0,o.kt)("p",null,"For more information about what additional information can be passed along in the annotations, follow the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/annotation-reference"},"guide.")),(0,o.kt)("h2",{id:"using-the-gql-api"},"Using the GQL API"),(0,o.kt)("p",null,"To access the buffer and search information, Statetrace provides a GraphQL API. This API can be accessed by submitting HTTP requests to the endpoint ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:4000/graphql/api/v1"},"http://localhost:4000/graphql/api"),"."),(0,o.kt)("p",null,"To quickly try out the API we can use GraphiQL. GraphiQL is an optional GUI for running GQL queries. It is unsafe to run in production, however to use it locally, just enable graphiQL by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"STATETRACE_ENABLE_GRAPHIQL")," to a truthy value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"name=docker-compose.yaml",name:"docker-compose.yaml"},"version: '3'\n    \n ...\n\n  # This is the statetrace daemon that will monitor changes\n  statetrace:\n    image: statetraceofficial/statetrace-beta\n    environment:\n      - STATETRACE_ENABLE_GRAPHIQL=1\n")),(0,o.kt)("p",null,"Next go to the graphiql interface: ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:4000/graphql/graphiql"},"http://localhost:4000/graphql/graphiql"),"."),(0,o.kt)("p",null,"Now you are ready to run a GQL Query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  scan(inboundName:"Postgres DB") {\n    rowLsnId\n    relationSchema\n    relationName\n    rowPk\n    rowRecord\n  }\n}\n')),(0,o.kt)("p",null,"For a more detailed exploration of the GraphQL API read the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/gql"},"reference.")))}d.isMDXComponent=!0}}]);